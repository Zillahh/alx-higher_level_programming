----------------------------------
The doctest to test the function that devides a matrix with a divisor
----------------------------------

::

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	...	]
>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	::

>>> print(matrix)
	[[1, 2, 3], [4, 5, 6]]

	::

	let us make the quotient round the numberr to 1 decimal

>>> print(matrix_divided(matrix, 1))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

	::

	>>> matrix = [
		...     [1.1, -2.2, 3.3],
		...     [4.4, 5.5, -6.6]
	...     ]
>>> print(matrix_divided(matrix, 3))
	[[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

	::

	>>> matrix = [
		...     [1, -2.2, 3, 4.4, 5],
		...     [-6.6, 7.00, 8, 9.999, 10]
	...     ]
>>> print(matrix_divided(matrix, 3))
	[[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

	::

	let us try invalid matrices

	>>> matrix = "a string"
>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

		::

		let us try NOne

	>>> matrix = None
>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

		::

		let us try empty list

	>>> matrix = []
>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

		::

		let us try single list

	>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

		::

		let us try a list with a string in it

		>>> matrix = [
			...	[1, 2, 3],
			...	[4, "five", 6]
	...	]
>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

		::

		each row must be the same size

		>>> matrix = [
			... [1, 2, 3, 4],
			... [4, 5, 6]
	... ]
>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):       
		TypeError: Each row of the matrix must have the same size

		::

		let us try invalid divisor

		>>> matrix = [
			... [1, 2, 3, 4],
			... [4, 5, 6, 6]
			... ]
			>>> print(matrix_divided(matrix, "string"))
			Traceback (most recent call last):
				TypeError: div must be a number

				::

				using None as divisor

				>>> matrix = [
					... [1, 2, 3, 4],
					... [4, 5, 6, 6]
	... ]
>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
		TypeError: div must be a number

		::

		using 0 as divisor to give division error

		>>> matrix = [
			... [1, 2, 3, 4],
			... [4, 5, 6, 6]
	... ]
>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
		ZeroDivisionError: division by zero

		::

		the one who's  divisor is a float

		>>> matrix = [
			... [2, 2],
			... [2, 2]
	... ]
>>> print(matrix_divided(matrix, 1.1))
	[[1.82, 1.82], [1.82, 1.82]]

	::

	let us try all float

	>>> matrix = [
		... [2.0, 2.0],
		... [2, 2.0]
	... ]
>>> print(matrix_divided(matrix, 1.1))
	[[1.82, 1.82], [1.82, 1.82]]

	::

	let us test for positive infinity

	>>> matrix = [
		... [2, 2],
		... [2, 2]
		... ]
		>>> print(matrix_divided(matrix, float('inf')))
		[[0.0, 0.0], [0.0, 0.0]]

		::

		>>> matrix = [
			... ["yes", "no"],
			... ["me", "no"]
	... ]
>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

		::

		>>> matrix = [
			... [1, 2, 3, 4],
			... [4, 5, 6, 6]
	... ]
>>> print(matrix_divided(matrix, [2, 3]))
	Traceback (most recent call last):
		TypeError: div must be a number

		::

		>>> matrix = [
			... [1, 2, 3, 4],
			... [4, 5, 6, 6]
	... ]
>>> print(matrix_divided(matrix, (2,)))
	Traceback (most recent call last):
		TypeError: div must be a number

		::

		>>> matrix = [
			... [3, 6, 9],
			... [12, 15, 18]
	... ]
>>> print(matrix_divided(matrix, 3))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

	::

>>> print(matrix)
	[[3, 6, 9], [12, 15, 18]]

	::

	>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
	[[]]
